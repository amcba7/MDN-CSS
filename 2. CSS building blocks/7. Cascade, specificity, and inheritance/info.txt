Cascade, specificity, and inheritance :
The aim of this lesson is to develop your understanding of some of the most fundamental concepts of CSS - the cascade , specificity, and inheritance, which control how CSS is applied to HTML and how conflicts between style declarations are resolved.

While working through this lesson may seem less relevant imeediately and little more academic then some other parts of the course, an understanding of these concepts will save you from a lot of pain later on! We encourage you to work through this section carefully and check that you understand the concepts before moving on.

Prerequisites : Basic computer literacy, basic software installed, basic knowledge of working with files, HTML basics (study Introduction to HTML), and an idea of how CSS works (study CSS first steps).
Objective : To learn about the cascade and specificity, and how inheritance works in CSS.

Conflicting rules :
CSS stands for CAscading Style Sheets, and that first word cascading is incredibly important to understand the way the cascade behaves is key to understanding CSS.

At some point, you will be working on a project and you will find that the CSS you though should be applied to an element is not working. Often, the problem is that you create two rules that apply differnt values of the same property to the same element. Cascade and the closely-related concept of specificity are mechanisms that control which rule applies when there is such a conflict. The rule that's styling your element may not be the one you expect, so you need to understand how these mechanisms work.

Also significant here is the concept of inheritance, which means the some CSS properties by default inherit vlaues set ont ehcurrent element's parent element and some don't. This can also cause some behavior that you might not expect.

Let's start by taking a quick look at the key things we are dealing with, then we'll look at each in turn and see how they interact with each other and your CSS. These can seem like a tricky set of concepts to understand. As you get more practice writing CSs, the way it works will become more obvious to you.

Cascade :
Stylesheets cascade - at a very simple level, this means that the origin, the cascade layer, and the order of CSS rules matter. When two rules from the same cascade layer apply and both have equal specificity, the one that is defined last in the stylesheet is the one that will be used.

In the below example, we have two rules that could apply to the <h1> element. The <h1> CONTENT ENDS UP BEING COLORED BLUE. tHIS IS BECAUSE BOTH THE RULES ARE from the same source, have an identical elemetn selector, and therefor , carry the same specificity, but the last one in the source order wins.

Specificity :
Specificity is the alogorith that the browser uses to decide which property value is applied to an element. If multiple style blocks have different selectos that configure the same property with different values and target the same element, specificity decides the property value that gets applied to the element, Specificity is basically a measure of how specific a selector's section will be:

-> An element selector is less specific; it will select all elements of that type that appear on a page, so it has less weigh. Pseduo-element selectors have the same specificity as regular element selectos.

-> A class selector is more specific; it will select only the elemetns on a page that have a specific class attribute value, so it has more weight. Attribute selectors and pseudo-classes have the same weight as a class.

Below, we again have tow rules that could apply to the <h1> elemetn. The <h1> content below ends up being colored red becuase the class selector main-heading gives its rule a higher specificity. So even through the ruel with the <h1> element selector appears further down in the source order, the one with the higher specificity, defined using the class selector , will be applied.

We'll explain the specificity algorith later on.

Inheritance :
Inheritance also needs to be understood in this context -- come CSS property values set on parent elements are inherited by their child elements, and some aren't.

For example, if you set a color and font-family on an element, every element inside it will also be styled with that color and font, unless you've applied different colror and font vlaues directly to them.

Some properties do not inherit -- for example, if you set a width of 50% on an element, all of its descndants do not get a width of 50% of their parent's width. If this was the case, CSS would be very frustrating to use!

Note : On MDN CSS property reference pages, you can find a technical information box called "Formal definition", which lists a number of data points about that property, including whether it is inherited or not. See the color property Formal definition section section as an example.

Understanding how the conepts work together :
These three concepts (cascade, specificity, and inheritance) together control which CSS applies to what element. In the sections below, we'll see how they work together. It can sometimes seem a little bit complicated, but you will start to remember them as you get more experienced with CSS, and you can always look up the details if you forget! Even experienced devlopers don't remember all the details.

The following video shows how you can use the Firefox DevTools to inspect a page's cascade, specificity, and more:

Understanding inheritance :
We'll start with inheritance. In the example below,  we have a <ul> element with two levels of unordreed lists nested inside it. We have given the outer <ul> a border, padding , and font color.

The color property is an inherited property. So, the color property value is applied to the direct children and also to the indirect children - the immediate child <li>s and those inside the first nested list. We have then added the class special to the second nested list and applied a different color to it. This is then inherits down through its children.

Properties like width (as mentioned eariler), margin, padding, and border are not inherited properties. If a border were to be inherited by the children in this list example, every single list and list item would gain a border - probably not an effect we would ever want!

Though every CSS property page listes whether or not the property is inherited, you can often guess the same intuitively if you know what aspect the property vlaue will style.

Controlling inheritance :
CSS provides five special universal property values for controlling inheritance. Every CSS property accepts these values.

Controlling inheritance :
CSS provides five special universal property values for controlling inheritance. Every CSS property accepts thesse values.

inherit : Sets the property value applied to a selected elemetn to be the same as that of its of its parent element. Effectively, this "turns on inheritance".
initial : Sets the property value applied to a selected element to the initial value of that property.
revert : Resets the property value applied to a selected element to tht browser's default styling rather than the defaults applied to that property. This value acts like unset in many cases.
revert-layer : Resets the property value applied to a selected element to the value established in a previous cascade layer.
unset : Resets the property to its natural value, which means that if the property is naturally inherited it acts like inherit, otherwise it acs like initial.

Note : See Origin types for more information on each of these and how they work.

We can look at a list of links and explore how universal values work. The live example below allows you to play with the CSS and see what happens when you make changes. Playing with code really is the best way to better understand HTML and CSS.

For example :
1. The second list item has the class my-class-1 applied. This sets the color of the <a> elemetn nested inside to inherit. If you remove the rule, how does it change the color of the link ?
2. Do you understand why the third and fourth links are the oclor that they are? The third link is set to initial , which means it uses the initial value of the property (in this case black) and not the browser default for links, which is blue. The fourth is set to unset which means that the link text uses the color of the parent element, green.
3. Which of the links will change color if you define a new color for the <a> element - for example a { color:red;}?
4. After reading the next section on resetting all propeerties, come back and change the color property to all. Noteice how the second link is on a new line and has a bullet. What properties do you think were inhertied?

Resetting all proprty values :
The CSS shorthand property all can be used to apply one of these inheritance values to (almost) all properties at once. Its value can be any one of the inheritance values (inheri, initial, revert, revert-layer, or unset). It's a convenient way to undo changes made to styles so that you can get back to a known starting point before begining new changes.

In the below example, we have two blockquotes. The first has styling applied to the blockquote element itself. The second has a class applied to the blockquote, which sets the vlaue of all to unset.

Try settign the value of all to some of the other avaialbe values and observer what the difference is.

Understanding the cascade :
We now understand that inheritance is why a paragraph nested deep in the structure of your HTML is the same color asd the CSS applied to the body. From the introductior lessons, we have an understanding of how to change teh CSS applies to sometimes at any point in the document whether by assigning CSS to an element or by creating a class. WE will now look at how cascade defines which CSS rules apply when more than one style block apply the same propety, but with different values, to the same element.

There are three factors to consider, listed here in increasing order of importance. Lswter onces overrule eariler ones:

1. Source order
2. Specificity
3. Importance 

We will look at these to see how browsrs figure out exactly what CSS what CSS should be applied.

Source order :
We have already seen how source order matters to the cascade. If you have more than one rule, all of which have exactly the same weight, then the one that comes last in the CSS will win. You can think of this as : the rule that is neareer the element itself overwrites the eariler ones until the last one wins and gets to style the element.

Sorce order only matters when the specificity weight of the rule is the same , so let's look at apecificity:

Specificity :
You will often run into a situation where you know that a rule comes later in the stylesheet, but an eariler, confiliting rule is applied. >THis happends becuase the eariler rule has a higher specificity - it is more specific , and therefore , is being chosen by the browser as the one that should style the element.

AS we saw earlier in this lession , a class selector has more weight than an element selector, so the properties defined in the class style block will overrid those defined in the element style block.

Something to note here is that although we are thinking about selectors and the rules that are applied to the text or component they select, it isn't the entire rule that is overwritten , only the properties that are declared in multiple places.

This behavior helps avoid repetiton in your CSS. A common practice is to define generic styles for the basic elements, and then create classes for those that are different. For example, in the styleshet below, we have defined generic styles for level 2 headings, and then created some classes that change only some of the properties and valus. The values defined initially are applied to all headings, then the more specific values are applied to the headings  with the classes.

Let's now have a look at how the browser will calculate specificity. We already know that an element selector has low specificity and can be overwritten by a class. Essentially a value is points is awarded to differeent types of selectors , and adding these up gives you the weight of the partcular seldctor , which can then be assess against other potential matches.

The amount of specificityi a selector has is measured using three differeetn values ( or components) which can be though of as ID, CLASS, and ELEMent columsn in the hundreds, tens, and ones place.

-> Identifires : Score one in this column for each ID selector containerd inside tht overall selelctor.
-> Classes : Score one in this column for each class selector, attribute selector, or pseudo-class contained inside the overall selector.
-> Elements : Score one in this columns for each elemetn selector or pseudo-elemtn contained insid ethe overall selector.

Note : The universal selector (*) , comintors (+,>,~,''), and specificity adjustmetn selector (:where()) along with tits paraments, have no effect on specificity.

The negation (:not()) , relational selector (:has()), the matches-any (:is()) pseudo-classs, and CSS nesting themseleves don't add to specificty, but their parameters or nested reuls do. The specificity weight that each contributes to the specificity algorithm is the specificity weight of the selector in the parameter or nested rule with the greatest weight.

The following tables shows a few isolated examples to get you in the mood. Try going through these, and make sure you undretsnd why they have the specificity that we have given them. We've not covered selectors in detail yet, but you can find details of each selctor on the MDN selelctos reference.

Before we move on, let's look at an example in action.
So what's going on here? First of all , we are only interested in the first seven rules of this example, and as you'll notice, we have included their specificity values in a comment befoer each one.

-> The first two selectos are competing over the styling of the link's background color. The second one wins and makes the background color blue because it has an extra ID selector in the chain: its specificity is 2-0-1 vs 1-0-1.
-> Selectors 3 and 4 are competing over the styling of the link's text color. The second one wins and makes the text white becuase although it has one less element selector. the missing selector is swapped out for a class selector, which has more weight than infinity element selectos . The winning specificity is 1-1-3 vs 1-0-4.
-> Selectors 5-7 are competing over the styling of the link's border when hovered. SElector 6 clearly loves to selecto 5 with a specificity of 0-2-3 vs 0-2-4; it has one fewer element selectos in the chain . Selector 7, however, beates both selectos 5 and 6 becuase it has the same number of sub selectors in the chain as selecto 5, but an element has been swapped out for a class selctor. So the winning specificity is 0-3-3 vs 0-2-3 and 0-2-4.
Note : EAch selector type has its own level of specificity that cannot be overwritten by selectors with a lower specifricity level. For example, a million class selectors comibned would not be able to overwrite the specifricity of on eid selecto.
The best way to eveualte specifrity is to score the specificity levesl individual starting from the hightest and moving on the the lowest when necessary. ONly when there is a tie between selecto scores within a specificity column do you need to evealuate the next column down; other wise, you can disreged the lower specificity selectos since they can never overwrite the highter specificity selectors.

Inline styles :
Inline styles, thats is , the style declaration inside a style attribute, take precedence over all noraml styles, no matter the specificity. Such declaration don't have selectors, but their specificity can be construced as 1-0-0-0; always more than any other specificity weight no matter how many IDs are in the selectos.

!important :
There is a special piece of cSS that you can use to overrule all of the avove calculations, even inline styles - the !important flag . However, you should be very careful while using it. This flag is used to make an individual property and value pair the most specific rule, thereby overriding the normal rules of the cascade, including normal inline styles,.

Note : It is useful to know that the !important flag exists so that you know what it is whe come across it in other people's code. However, we stongly recommened that you naver use it unless you absolutly have to . The !important flag change sthe wya cascade normally works, so it can mek debugging CSS problems really hard to work out, especially in a large styleshet.

TAke a look at this example where we ahve two paragraph , on of which has an ID.

Let's walk through this to see what's happening - try removing some of the properties to see what happens if you are finding it hard to understand:
1. You'll see that the third rule's color and padding values have been applied , but the background-color hasn't. Why ? Really, all three should surely apply because rules later in the source order generally overrid eariler rules.
2. Hoverever, the rules above it win because class selectors have higher specificity than element selectors.
3. Both elements have a class of better, but the 2nd one has an id of winning too. Since IDs have an even higher specificity than classes (you can only have one element with each uniqure ID on a page, but many elements with the same class - ID selectors are very specific in what they target), the red background color and the 1px black border should both be applied to the 2nd element, with the first element getting the gray background color, and no border, as specificd the class.
4. The 2nd element does get the red background color, but no border. Why? Because of the !important flag in the second rule. Adding the !important flag after border:none means that this declaration will win over the border value in the previous rule, even thourh the ID selector has higher specificity.

Note : The only way to overrid an important declaration is to include another important declaration with the same specificity later in the source order, or one with higher specificity or to include an important declaration in a prior cascade layer (we haven't covered cascade lyaers yet).
One situtation in which you may have to use the !important flag is when you are working on a CMS where you can't edit the core CSS modules , and you really want to overrid an inline style or an important declaration that can't be overriden in any other way. But really, don't use it if you can avaoid it.

The effect of CSS loacation :
Finally, it is important to note that the precedence of a CSS declaration dependes on what stylesheet and cascede layer is specified in.

It is possible for users to set custom stylesheets to override the developer's styles. For example, a visually imparired user might want to set the font size on all web pages they visited to be double the normal size to allow for easiter reading.

It is also possible to declare develoer style in cascade layers: you can make non-layered styles overrid styles declared in layers or you can make styles declared in later layers overrid styles from stylesheet, but you can import the external stylesheet into a cascade layer so that ll of your styles easily overrid the imported styles without worring about third-party selector specificity.

Order of overriding declarations :
Conflicting declaratiokns will be applied in the following order, with later ones overriding eariler ones:

1. Declarations in user agent style sheets (e.g the browsers's default styles, used when no other styling is set).
2. Normal declaration in user style sheets (custom styles set by a user).
3. Normal declaration in author style sheets (these are the styles est by us, the web developers).
4. Important declaration in author style sheets.
5. Important declarations in user style sheets.
6. Important declarations in user agents style sheets.

Note : The order of precedence is inverted for styles flagged with !important. It makes sense for web developers' stylesheets to overrid user stylesheets, so the design can be kept as intended; however, somtimes users have good reason to overrid web develper styles, as mentioned above, and this can be achieved by using !imporatnt in their rules.

Order of cascade layers :
Even though cascade layers is an advanced topic and you may not use this feature right away, it's important to understand how layers cascade.

When you declare CSS in cascade layers, the order of precedence is determined by the order in which the layers are declared. CSS styles declared outside of any layer are comined together, in the order in which those styles are declered , into an unnamed layer, as if it were the last declared layer. With compueting normal (not important) styles, later layers take precedence over earlier defined layers. For styles flagged with !important, however, the order is reversed, with important styles in earlier layers taking precedence over important styles declared in subsequent layers or outside of any layer. Inline styles take precedence over all author styles, no matter the layer.

When you have multiple style blocks in different layers providing competing values for a property on a single element, the order in whi ch the layers are declared determines the precedence. Specificity between layers donen't matter, but specifricity within a single layer still does.

Let's discuss a few things from the above example to understand what's happening. Two layers have been declared, firstLayer and secondLayer, in the order. Even though the specificity in secondLayer is the highest, no properties from that declaration are used. Why ? Because non-layerd normal styles take precedence over layered noraml styles, no matter the specificity, and important layerd styles take precedence over important styles declared in later layers, again , no matter the specificity.

If you change the first line of CSS in this example to read @layer secondLayer, firstLayer; you wil lchange the layer declaration order, and all the imporatnt sytyles form firstLayer will be changed to their respective vlues in secondLayyer.
Test your skills !
You've reched the end of this article, but can you remember the most important inforamtion ? you can find some further tests to verify that you've retained this inforamtion before you move on -- see TEst your skills : The Cascade.

Summary :
If you understood most of this article , then well done -- you've s tarted getting familer with the funamental mechanics of CSS. Next up, we'll take a deeper look at Cascade Layers.

If you didn't fully understand the cascade, specificity, and inheritance, then don't worry! This is definitely the most complicated things we've covered so far in the course and is something that even professional web devleopers sometimes find tricky. We'd advise that you returne to this article a few times as you continue through the course, and keep thingking about it.

Refer back here if you start to come acrsoos staragn issues wiht  styles not applying as expected. It could be a specificy issue.
