Sizing items in CSS :
In the various lessons so far, you have come across a number of ways to size items on a web page using CSS. Understanding how big the different features in your design will be is important. So, in the lesson we will summarize the various ways elements get a size via CSS and define a few terms about sizing that will help you in the future.

Prerequisites : Basic computer literaccy, basic software installed, basic knowledge of working with files, HTML basics (study Introduction to HTML), and an idea of how CSS works (study CSS first steps).
Objective : To understand the different ways we can size things in CSS.

The natural or intrinsic size of things :
HTML Elements have a natural size, set before they are affected by any CSS. A straightforward example is an image. An image file contains sizing inforamtion, described as its intrinsic size. This size is determined by the image itself, not by any formatting we happen to apply.

if you place an image on a page and do not change its height or wiidth, either by using attributes on the <img> tag or else by CSS, it will be diisplayed using that intrinsic size. We have given the image in the example below a border so that you can see the extent of its size as defined in its file.

An empty <div>, on the other hand, has no size of its own, if you add a <div> to your HTML with no content, then give it a border as we did the image, you will see a line on the page. This iis the collapsed border on the element - there is no content to hold it open. In our example below, that border stretches to the width of the containe, becuase it is a block level element, a behavior that should be starting to become familiar to you. It has no height (or size in the block dimension) because there is no content.

In the example above, try adding some text inside the empty element. The border now contains that text because the height of the element is defined by the content. Therefore the size of this <div> in the blcok dimension comes from the size of the content. Again, this is the intrinsic size of the element - its size is defined by its content.

Setting a specific size :
We can. of course, give elements in our design a specific size. When a size is given to an element (the content of which then needs to fit inot the size) we refer to it as an extrinsiic size. Take our <div> from the example above - we can give it specific width and height values, and it will now have that size no matter what content i splaced into it. As we discovered in our previous lesson on overflow, a set height can cause content to overflow if there is more content than the elements has space fit inside it.

Due to this problem of overflow, fixint the height of elements with length or percentages is something we need to do very carefully on the web.

Using percentages :
in many ways, percentages act like length units, and as we discussed in the lesson on values and units, they can often be used interchangeably with lenngths. When using a percentage you need to be aware what it is a percentage of. IN the case of a box inside another container, if you give the child box a percentage width it will be a percentge of the width of the parent container.

Thsi is because percentages resolve agains the size of the containg lock. With no percentaeg applied, our <div> would take up 100% of the avaialb espace, as it is a block level element. If we give it a percentage width, this becomes a percentage of the space it would normally fill.

Percentage margins and padding :
if you set margins and padding as a percentage, you may notice some strange behavior. In the below example we have a box. We have given the inner box a margin of 10% and a padding of 10%. The padding and margin on the top and bottom of the box are the same size as the padding and margin on the left and right.

You mihgt expect for example the percentage top and bottom margins to be a percentge of the element's height, and the percentage left and right margins to be a percentage of the element's width. However, this is not the caes!

Whe you use margin and padding set in percentages, the value is calculated from the inline size of the containing block - therefore the width when working in a horizontal language. In our example, all of the margins and paddiing are 10% of the width. This means you can have equal-sized margins and padding all around the box. This is a fact worth remembering if you do use percentages in this way.

min- and max- sizes :
In addition to givin things a fixed size, we can ask CSS to give an element a minimum or a maximum size. If you have a box that might contain a variable amoutn of content, and you alwayss want it to be at least a certain height, you could set the min-height property on it. The box will always be at least this height , but will then grow taller if there is more contect thatn the box has space for at its minimum height.

In the example below you can see two boxes, both with a defined min-height of 150 pixels. The box on the left is 150 pixels tall; the box on the right has content that needs more room, and so it have grown taller than 150 pixels.

This is very useful for dealing with variable amounts of content while voiding overflow.

A common use of max-width is to cause images to scale down if there is not enough space to display them at their intrinsic width while making sure they don't become larger than that width.

As an example, if you were to set width: 100% on an image, and its intrinsic width was smaller than its container, the image would be forced to stretch and become larger, causing it to look pixelated.

If you instead use max-width: 100%, and its intrinsic width is smaller than its container, the image will not be forece to stretch and become larger, thus preventing pixelation.

in the example below, we have used the same image three times. The first image has been given width: 100% and is in a container which is larger than it, therefore it stratches to the container width. The second image has max-width: 100% set on it and therefore does not stretch to fill the container. The third box contains the same image again, als with max-width:100% set; in this cas you can see how it has scaled down to fir into the box.

This technique is used to make images responsive, so that when viewed on a samller device they scale down appropriately. You should, however, not use this techniique to load really large images and then scale them down in the browser. Images should be appropriately sized to be no larger than they need to be for the largest size they are displayed in the design. Downloading oerly large image will cause you site to become slow, and it can cost users more money if they are on a metered connection.

Note : Find out more about responsive image techniques.

Viewport units :
The viewport - which is the visible area of your page in the browser you are using to view a site also has a size. In CSS we have units which relate to the size of the viewport - the vw unit for viewport width, and vh for viewport height. Using these units you can size something relative to the viewport of the user.

1vh is equl to 1% of the viewport height, and 1vw is equl to 1% of the viewport width. You can use these units to size boxes, but also text. In the example below we have a box which iss sized as 20vh and 20vw. The box contains a letter A, whcih has been given a font-size of 10vh.

If you chagne the vh and vw values this will change the size of the boxc or font; chaninging the viewport size will also change their sizes becuase they are sized relative to the viewprot. To see the example change when you change the viewport size yoiu will need to load the example in a new browser window that you can resize (as the embedded <ifrma> that contains the example shown abouve is its viewport). Open the example resize the browser window , and observe what happens to the size of the box and text.

Sizing things according to the viewport can be useful in yoiur designes. For example, if you want a full-page hero section to show before the rest of your content , making that prt of your page 100vh high will push the rest of the content below the viewport, meaning that it will only appear once the document is scrolled.

Test your skills!
You've reached the end of this article, but can you remember the most important information? You can find some further tests to verify that you've retained this information before you move on -- Test your skills: Sizing.

This lesson has given you a rundown of some key issues that yoiu might run into when sizing things on the web. When you move onto CSS Layoiut, sizing will become vey important in mastering the different layout methods, so it worth understanding the concepts here before moveing on.

In the next article, we'll take a look at how images, media, and form elements are treated in CSS.
