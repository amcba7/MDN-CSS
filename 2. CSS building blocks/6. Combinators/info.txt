Combinators :
The final selectors we will look at are called combinators, because they combine other selectors in a way that gives them a useful relationship to each other and the location of contenct in the document.

Prerequisites : Basic computer literacy, basic software installed, basic knowledge of working with files, HTML basics (study Introduction to HTML), and an idea of how CSS works (study CSS first steps).
Objective : To learn about the different combinators selectors that can be used in CSS.

Descendant combinator :
The descendant combinator - typically represeneted by a single space ("") character - combines two selectors such that elements matched by the second selector are selected if they have an ancestor (parent , parent's parent, parent's parent's parent, etc.) element matching the first selector. Selectors that utilize a descendant combinator are called descendant selectors.

body article p

In the example below, we are matching only the <p> element which is insid e and elemetn wit a clasd .box

.box p {
	color :red;
}
Child combinator :
The child combinator (>) is placed between two CSS selectors. It matches only those elements matched by the second selector that are the direct children of elements matched by the first Descendant elements further down the hierachy don't match. For example, to select only <p> elements that are direct children of <article> elements.

article > p

In this next example, we hae an unordered list, nested inside of which is an ordered list. The child combinators selects only those <li> elements which are direct children of a <ul>, and styles them with a top border.

If you remove the > the designates this as a child combinator, you end up with a descendant selector and all <li> elements will get a red border.

ul > li {
	border-top : 5px solid red;
}

<ul>
	<li> Unordered item</li>
	<li>Unordered item
		<ol>
			<li>Item 1</li>
			<li>Item 2 </li>
		</ol>
	</li>
</ul>
Next-sibiling combinator :
The next-sibling combinator (+) is placed between two CSS selectors. It matches only those elements matched by the second selector that are the next sibling element of the first selector. Fo example, to select all <img> elements that are immediately preceded by a <p> element:
p + img

A common use case is to do something with a pargraph that follows a heading , as in the example below. In that example, we are looking for any paragraph which shares a parent element with an <h1>, and immediately follows that <h1>.

If you insert some other elements such as a <h2> in between the <h1> and the <p>, you will find that the paragraph is no longer matched by the selector and so does not get the background and foreground color applied when the element is adjacent.
Subsequent-sibling combinator :
If you want to select sibilings of an element even if they are not directly adjacent, then you can use the subsequent-sibling combinator (~). To selelct all <img> element that come anywhere after <p > elemtn, we'd do this 
p ~ img
In the example below we are selecting all <p> elemtns that come after the <h1> , and even though there is a <div> in the document as well, the <p> that comes after it is selected.

Creating complex selector with nesting 

The CSS nesting module allows you to write nested rules that use combinators to create complex selectors.

p {
	!img {
	}
}
/* THis is parseb the brose as */
p ~img {
}

uSING COMBINATORS :
you can combine any of the selectos that we discovered in previous lesson with combinators in order to pick out part of your document. For example, to select list items with a class of "a" which are direct children of a <ul>, try the following:

ul > li[class="a"] { }
Take care, however, when creasting big lists of selectos that select very specific parts of your document. It will be hard to reuse the CSS rules since you have made the selector very specifi to the location of that element in the markup.

It is often better to create asimple class and apply that to the elemetn in question. That said , your knowledge of combinators will be very useful if you need to style someting in your documentand are unable to access the HTML, peraaps due to it being generated by a CMS.

Test you skills !
You've reache the end of this article , but can you rember the most important information ? you can find some further tests to verify that you've retained this information before you move on - see Test your skills:Selectors.
Summary :
This is the last section in our lessons on selectors. Next, we'll move on to another improtant part of CSS - the cascade, specificity, and inheritance.
