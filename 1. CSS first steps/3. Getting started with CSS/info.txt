Getting started with CSS 

In this article, we will take a simple HTML document and apply CSS to it. learning some practical thigns about the language along the way.

Prerequisites : Basic computer litercy basic software installed, basic knowledge of working with files, and HTML basic (study Introduction to HTML)
Objective : To understand the basics of linking a CSS document to an HTML file, and be able to do simple text formatting with CSS.

Starting with some HTML :
Our starting point is an HTML document. You can copy the code from below if you want to work on your own computer. Save the code below as index.html in a folder on your machine.

Note : If you are reading this on a device or an environment where you can't easily create files, then don't worry - live code editor are provided below to allow you to write example code right here in the page.

Adding CSS to our document :
The very first thing we need to do is to tell the HTML document that we have some CSS rules we want it to use. There are three different wayts to apply CSS to an HTML document that you'll commonly come across, however , for now , we will look at the most usual and useful way of doing so - linking CSS from the head of your document.

Create a file in the same folder as your HTML document and save it as styles.css. The .css extension shows that this is a CSS file.

To link styles.css to index.html, add the following line somewhere inside the <head> of the HTML document:

<link rel="stylesheet" href="styles.css"/>

This <link> element tells the browser that we have a stylesheet, using the rel attribute, and the location of that stylesheet as the value of the href attribute. You can test that the CSS works by adding a rule to styles.css. Using your code editor, add the folloing to your CSS file:
h1 {
	color:red;
}

Save your HTML and CSS files and reload the page in a web browser. The level one heading at the top of the document should now be red
Save your HTML and CSS files and reload the page in a web browser. The level one heading at the top of the document should now be red. If that happens, congratulations - you have successfully applies some CSS to an HTML document. If that doesn't happen , carefully check that you've typed everthign correctly.

You can continue to work in styles.css locally, or you can use our interactive editor below to continue with this tutorial. The interactive editor acts as if the CSS in the first panel is linked to the HTML document, just as we have with our document above.

Styling HTML elements :
By making our heading red, we have alreay demonstrated that we can target and style an HTML element. We do this by targeting an element selector - this is a selector that directly matches an HTML element name. To target all paragraphs in the document, you would use the selector p. To turn all paragraphs green, you would use:

p {
	color : green;
}
You can target multiple selectors at the same time by separating the selector with a comma. if you want all paragraphs and all list items to be green, your rule would look like this:
p,
li {
	color:green;
}
Try this out in the interactve editor below (edit the code boxes) or in your local CSS document.

Changing the default behavior of elements :
When we look at a well-marked up HTML document, even something as simple as our example, we can see how the browser is making the HTML readable by adding some default styling. Headings are large and bold and our list has bullets. This happends because browsers have internal stylesheets containg default styles, which they apply to all pages by default; without them all of the text would run together in a clump and we would hae to style everything from scratch. All mordern browsrs display HTML content by default in pretty much the same way.

However, you will often want something other thatn the choice the browser has made. This can be done by choosing the HTML elemetn that you want to change and using a CSS rule to change the way it looks, A good example is <ul> an unordersed list. IT has list bullets. if  you don't want htose bullets , you can remove them like so:
li {
	list-style-type-none;
}
Try adding this to your CSS now .
The list-style-type property is good property to look at on MDN to see which values are supported. Take a look at the page for list-style-type and you will find an interactive example at the top of the page to try some differeetn values in, then all allowable values are detailed further down the page.

Lokking at that page you will discover that in addition to removing the list bullets , you can change them - try changing them to squarre bullets by using a value of square.
Adding a class :
So far, we have styled elements based on their HTML elemetn names. This work as long as yu want all of the elemetns of that type in your document to look the same. To select a subset of the elemetns without chaning the others , you can add a class to your HTML elemetn and target that class in your CSS.

1. IN your HTML document, add a class attribute to the second list item. YOU list will now look like this:
2. IN your CSS, you can target the class of special by creating a selector that starts with a full stop character. ADD the folloing to your CSS file:
3. Save and refresh to see what the result is.

You can apply the class of special to any elemetn on your page that you want to have the same look as this list item. For example, you might want the <span> in the paragraph to also be orage and bold. Try adding a class of special to it, then reload your page and see what happends.

Sometimes you will see reuls with a selector that list the HTML element selector along with the class:
li.special {
	color: orage;
	fonr-weight:bold;
}
This syntax means "target any li element that has a class of special" if you wree to do this, then you would no longer be able to apply the class ot a <span> or another element by adding the class to it; you would have to add the eleemtn to the list of selectors:
li.special, span.special {
color:orange;
font-weight:bold;
}
As you can imagine, some classes might be applied to many elements and you don't want to have to keep editing your CSS every time something new needs to take on the style. Therefore, it is sometimes best to bypass the eleemtn and refer to the class, unless you know that you want to crear some special rule for one elemtn alone, and perahps want to make sure they are not applied to other things.

Styling things based on their locaiton in a document :
There are times when you will want something to look different based on where it is in the document. There are a number of selectors that can help you here, but for now we will look at just a couple. IN our document, ther are two <em> elemtns - one inside a paragraph and the other inside a list item. To select only an <em> that is nested inside an <li> element, you can use a selector class the descenent cominator, which takes the form of a space between two other selectors.

Add the following rule to your stylesheet:
li em {
	color: rebeccapurple;
}
This selector will select any <em> element that is inside (a descendant o fan <li>. So in your example docuemt, you should find that the <em> in the third list item is now purple , but the one inside the paragraph is unchanged.

Something else you might like to try is styling a paragraph when it comes directly after a heading at the same hierachy level in the HTML. To do so, place a + (an next-sibiling comibator) betwwen the selectors.
Try adding this rule to yoru stylesheet as well:
h1 + p {
font -size:200%;
}

The live example below includes the two rules abouve. Try adding a rule to make a span red if it is inside a paragraph. you will know if you have it right because then span in the first paragraph will be red, but the one in the first list item will not change color.

NOte : As you can see, CSS gies us several wayt to target elemetns, and we've only scrated the surface so far! WE will be taking a proper look at all of these selectors and many more in our Selectors articles later on int the course.

Styling things based on state :
The final type of styling we shall take a look at in this tutorial in the ability to style things based on their state. A straghforward example of this is when styling links. When we style a link , we need to target the <a> (anchor) elemetn. This has different states depending on whenterh it is univisited vistited, being hovered over, focused via the keyboard, or in the process of being clicked (actived). YOu can use CSS to target these differeetn states - the CSS below styles unvisted link pink and visted link green.
a : link {
	color : pink;
}
a: visited {
	color : green;
}
You can change the way the way the link looks when the user hovers over it, for exampel removeing underline, which is achived by the next rule 
a : hover {
text-decoration : none;
}
In the live example below, you can play with different values for the various states of a link. We have added the rules above to it, and now relize that the pink color is quite light and hard to read - why not change that to a better color? Can you make the links bold ?

We have removed the underline on our link on hover. You could remove the underline from all states of a link. It is worth remembering however that in a real site, you want to ensure that visitor know that a link is a link. Leaving the underline in place can be an important clue for people to realize that some text inside a paragraph can be clicked on - this is the behavior they are used to . As with everything in CSS, there is the pontntion to make the document less accessible with your changes - we will aim to highlight potential pitfalls in appropriate places.

Note : you will often see mention of accessiblity in these lesson and across MDN. When we talk about accessibility we are referring to the requitement for our webpages to be understanable and usable by everyone.
Your visitor may well be on a computer with a mouse or trackpad, or a phone with a touchscreen. Or they might be using a screen reader, which reads out the content of the document, or they may need to use much larger text, or be navigation the site using the keyboard only.
A plain HTML document is generally accessible to everyone - as you start to style that document it is important that you don't make it less accessible.

Combining selectors and combinators :
It is worth nothing that you can combine multple selectors and combinators together . For example:
article p span {
}
h1 + ul + p {
}
You can combine multiple types together, too. Try adding the following into your code:

body h1 +p.special {
color : yello;
background-color:black;
padding:5px;
}
This will style any element with a class of special , which is inside a <p>, which comes just after an <h1>, which is inside a <body>. Phew!

In the original HTML we provided , the only elemetn styled is <span class="special">.
Don't worry if this seems complicated at the moment - you'll soon start to get the hang of it is as you write more CSS.

Summary :
In this article, we have taken a look at a number of ways in which you can style a document using CSS. We will be developing this knowledge as we move through the rest of the lessons. However, you need alreay know enough to style text, apply CSS based on different ways of targeting elemetns in the documents, and look up properties and values in the MDN documentation.

In the next lession, we'll be taking a look at how CSS is structured.
