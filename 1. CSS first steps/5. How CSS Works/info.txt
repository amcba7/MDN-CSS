How CSS works :
We have learned the basics of CSS, What it is for how to write simple stylesheets. IN this lesson we will take a look at how a browser takes CSS and HTML and turns that into a webpage.

Prerequisites : Basic computer literacy, basic software instlled, basic knowledge of working with files, and HTML basics (stydy INtrouction to HTML)
Objective : To understand the basics of how CSS and HTML are parsed by the browser, and what happends when a browser encounters CSS it does not undrestand.

How does CSS actually work ?
When a browser displays a document, it must combine the document's content with its style information. It processes the document in a number of stages, which we've listed below. Bear in mind that this is a very simplified version of what happends when a browser loads a webpage, and that different browsers will handle the process in different ways. But this is roughly what happens.

1. The browser loads the HTML (e.g receives it from the network).
2. It converts the HTML into a DOM (Document Object Model). The DOM represents the document in the computer's memory. The DOM is explained in a bit more detail in the next section.
3. The browser then fetches most of the resources that are linked to by the HTML document, such as embedded images, videos, and even linked CSS! JavaScript is handled a bit later on in the process, and won't talk about it here to keep things simpler.
4. The browser parses the fetched CSS, and sorts the differeent reuls by theri selector types into differeent "buckets", e.g elemtn, class, id and so on. Based on the selectors it finds, it works out which rules should be applied to which nodes in the DOM, and attaches styles to them as required (this intermediate step is clled a render tree).
5. The render tree is laid out in the strucutre it should appear in after the rules have been applied to it.
6. The visual display of the page is shown on the screen (this stage is cled painting). 
The following diagram also offeres a simpel view of the process.
About the DOM :
A DOM has a tree-like structure. EAch elemetn, attribute, and piece of text in the markup language becomes a DOM node in the tree stucture. The nodes are defined by their relationship to DOM nodes. Some elements are parents of child nodes, and child nodes have sibilings.

Understanding the DOM helps you design , debug and maitain your CSS because the DOM is where your CSS and the document's content meet up. When you start workign with browser DevTools you will be navigating the DOM as you select items in order to see whcih rules apply.

A real DOM representation :
Rather than a long, boring explation, lets look at an example to see how a real HTML snippet is converted into a DOM.

Take the following HTML code:
<p>
	Let's use:
	<span>Cascading</span>
	<span>Style</span>
	<span>Sheets</span>
</p>
In the DOM, the node corresponding to our <p> element is a parent. Its children are a text node and the three nodes corresponding to our <span> elements. The SPAN nodes are also parents, with text nodes as their children:
p
|--"let's use:"
|-SPAN

This is how a browser interprets the pervious HTML snippet - it render the abouve DOM tree and the output it in the browser like so:
Applying CSS to the DOM :
Let's say we add some CSS to our document, to style it. Again , the HTML is as follows:
<p>
Let's use:
<span> Cascading</span>
<span>Style</span>
<span>Sheets</span>
</p>
Let's suppose we apply the following CSS to it:
span {
	border: 1px solid black;
	background-color : lime;
}
The browser parses the HTML and creates a DOM from it. Next, it parses the CSS. Since the only rule avaiable in the cSS has a span selector, the browser sorts the CSS cery quickly! It appliesrs that rule to each one of the three <span>s, then paints the final visual representation to the screen.

THe updated output is as follows:

In out Debugging CSS article in the next module we will be using browser DevTools to debug CSS problems, and will learn more about how the browser interprets CSS.

What happends if a browser encounters CSS it doesn't understand ?
The "Browser support inforamtion " section in the "What is CSS" article mentioned that browsers do not necessarily implement new CSS features at the same time. IN additon, many people are not uinsg the latest version of a browser. Given that CSS is beding devloped all the time, and is therefore ahead of what browsers can recognize, you mgiht wonder what happends if a browser encounters a CSS selector or declaration it doen't recognize.

The answer is that it does notheign , and just moves on to thhe next bit of CSS!

If a browser is parsing your rules , and encounters a property or value that it doesn't understand, it ignores it and moves on to the next declartion . It will do this if you have made an error and misselled a property or value, or if the property or value is just too new and the browser doesn't yet support it.

Simiarly, if a browser encounters a selector that it doen't understand , it will just ignore the whole rule and move on to the next one.

In the example below I hae used the Britsh English spelling for color, which makes that property invalid as it is not recognized. So my paragraph has not been colored blue. All of the other CSS have been applied however; only the invalid line is ignored.
This behavior is very useful. It means that you can use new CSS as an enhancement, knowing that no error will occur if it is not understaood - the browser will either get the new feature or not. This enables basic fallback styling.

This works particularly well when you want to use a vlaue that is quite new and not supported everywhere. For example, some older browsers do not support calc() as a value. I might giev a fallbakck width for a box in pixels, then go on to give a width with a calc() value of 100% - 50px old browsr will use the pixel version, ignoring the line about calc() as they don't understand it. New browser will interpret the line using pixels, but then overrid it with the line using calc() as the line appears later in the cascade.
We will look at many more ways to support variaosu browsers in later lessons.

Summary 
You've nearly finished this moduel - we only have one more thing to do. In the Styling a biograhy page assessment you'll use your new knowledge to restyle an example, test our some CSS in process.
